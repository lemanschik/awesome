'use strict';

// eslint-disable-next-line no-unused-vars
const { createMachine, createState, StateMachine } = require('next-state');
const { constants, createSign } = require('protocol/packet');

const HANDSHAKE_INIT = 'HANDSHAKE_INIT';
const HANDSHAKE_FINISH = 'HANDSHAKE_FINISH';
const CLIENT_HELLO = 'CLIENT_HELLO';
const SERVER_HELLO = 'SERVER_HELLO';
const HELLO_VERIFY_REQUEST = 'HELLO_VERIFY_REQUEST';
const CERTIFICATE = 'CERTIFICATE';
const SERVER_KEY_EXCHANGE = 'SERVER_KEY_EXCHANGE';
const CERTIFICATE_REQUEST = 'CERTIFICATE_REQUEST';
const SERVER_HELLO_DONE = 'SERVER_HELLO_DONE';
const CERTIFICATE_VERIFY = 'CERTIFICATE_VERIFY';
const CLIENT_KEY_EXCHANGE = 'CLIENT_KEY_EXCHANGE';
const FINISHED = 'FINISHED';
const CHANGE_CIPHER_SPEC = 'CHANGE_CIPHER_SPEC';
const CLIENT_CERTIFICATE = 'CLIENT_CERTIFICATE';
const CLIENT_FINISHED = 'CLIENT_FINISHED';
const CLIENT_CHANGE_CIPHER_SPEC = 'CLIENT_CHANGE_CIPHER_SPEC';

const DTLS_CLIENT = 0xffff + 1;
const DTLS_SERVER = 0;

// Transitions of client state machine.
const transitions = {
  [HANDSHAKE_INIT]: createState(CLIENT_HELLO),
  [CLIENT_HELLO]: createState(HELLO_VERIFY_REQUEST, SERVER_HELLO),
  [HELLO_VERIFY_REQUEST]: createState(CLIENT_HELLO),
  [SERVER_HELLO]: createState(
    CERTIFICATE,
    SERVER_KEY_EXCHANGE,
    SERVER_HELLO_DONE
  ),
  [CERTIFICATE]: createState(
    SERVER_KEY_EXCHANGE,
    CERTIFICATE_REQUEST,
    SERVER_HELLO_DONE
  ),
  [CLIENT_CERTIFICATE]: createState(
    CLIENT_KEY_EXCHANGE,
    CLIENT_CHANGE_CIPHER_SPEC
  ),
  [SERVER_KEY_EXCHANGE]: createState(CERTIFICATE_REQUEST, SERVER_HELLO_DONE),
  [CERTIFICATE_REQUEST]: createState(SERVER_HELLO_DONE),
  [SERVER_HELLO_DONE]: createState(CLIENT_KEY_EXCHANGE, CLIENT_CERTIFICATE),
  [CLIENT_KEY_EXCHANGE]: createState(
    CERTIFICATE_VERIFY,
    CLIENT_CHANGE_CIPHER_SPEC
  ),
  [CERTIFICATE_VERIFY]: createState(CLIENT_CHANGE_CIPHER_SPEC),
  [CHANGE_CIPHER_SPEC]: createState(FINISHED),
  [CLIENT_CHANGE_CIPHER_SPEC]: createState(CLIENT_FINISHED),
  [FINISHED]: HANDSHAKE_FINISH,
  [CLIENT_FINISHED]: createState(CHANGE_CIPHER_SPEC),
};

const table = new Map([
  [constants.CLIENT_HELLO, CLIENT_HELLO],
  [constants.SERVER_HELLO, SERVER_HELLO],
  [constants.HELLO_VERIFY_REQUEST, HELLO_VERIFY_REQUEST],
  [constants.CERTIFICATE, CERTIFICATE],
  [constants.SERVER_KEY_EXCHANGE, SERVER_KEY_EXCHANGE],
  [constants.CERTIFICATE_REQUEST, CERTIFICATE_REQUEST],
  [constants.SERVER_HELLO_DONE, SERVER_HELLO_DONE],
  [constants.CERTIFICATE_VERIFY, CERTIFICATE_VERIFY],
  [constants.CLIENT_KEY_EXCHANGE, CLIENT_KEY_EXCHANGE],
  [constants.FINISHED, FINISHED],
  [constants.CHANGE_CIPHER_SPEC, CHANGE_CIPHER_SPEC],
  [constants.CERTIFICATE | DTLS_CLIENT, CLIENT_CERTIFICATE], // eslint-disable-line no-bitwise
  [constants.FINISHED | DTLS_CLIENT, CLIENT_FINISHED], // eslint-disable-line no-bitwise
  [constants.CHANGE_CIPHER_SPEC | DTLS_CLIENT, CLIENT_CHANGE_CIPHER_SPEC], // eslint-disable-line no-bitwise
]);

const states = {
  HANDSHAKE_INIT,
  HANDSHAKE_FINISH,
  CLIENT_HELLO,
  SERVER_HELLO,
  HELLO_VERIFY_REQUEST,
  CERTIFICATE,
  SERVER_KEY_EXCHANGE,
  CERTIFICATE_REQUEST,
  SERVER_HELLO_DONE,
  CERTIFICATE_VERIFY,
  CLIENT_KEY_EXCHANGE,
  FINISHED,
  CHANGE_CIPHER_SPEC,
  CLIENT_CERTIFICATE,
  CLIENT_FINISHED,
  CLIENT_CHANGE_CIPHER_SPEC,
};

/**
 * Create DTLS state machine.
 * @returns {StateMachine}
 */
function createDtls() {
  return createMachine(transitions, HANDSHAKE_INIT);
}

/**
 * Creeate state machine's state from received packet.
 * @param {number} side DTLS client or server.
 * @param {number} protocol Record type.
 * @param {number} type Type of handshake or 0.
 * @returns {string}
 */
function createStateFromPacket(side, protocol, type) {
  const sign = createSign(protocol, type);
  return table.get(sign | side); // eslint-disable-line no-bitwise
}

module.exports = {
  createDtls,
  createState: createStateFromPacket,
  constants: {
    DTLS_CLIENT,
    DTLS_SERVER,
  },
  states,
};
